/*
 *  Phusion Passenger - https://www.phusionpassenger.com/
 *  Copyright (c) 2010-2014 Phusion
 *
 *  "Phusion Passenger" is a trademark of Hongli Lai & Ninh Bui.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */

/*
 * ConfigurationSetters.cpp is automatically generated from ConfigurationSetters.cpp.erb,
 * using definitions from lib/phusion_passenger/apache2/config_options.rb.
 * Edits to ConfigurationSetters.cpp will be lost.
 *
 * To update ConfigurationSetters.cpp:
 *   rake apache2
 *
 * To force regeneration of ConfigurationSetters.cpp:
 *   rm -f ext/apache2/ConfigurationSetters.cpp
 *   rake ext/apache2/ConfigurationSetters.cpp
 */

<%
require 'phusion_passenger/apache2/config_options'

def filter_eligible_options(options)
	return options.reject do |option|
		option[:alias_for] ||
			option.fetch(:field, true).nil? ||
			option[:field].to_s =~ /\./ ||
			option[:function]
	end
end

def struct_field_for(option)
	if option.has_key?(:field)
		return option[:field]
	else
		result = option[:name].sub(/^Passenger/, '')
		result[0] = result[0..0].downcase
		return result
	end
end

def min_value_for(option)
	return option[:min_value] || 0
end

def function_for(option)
	function_name = option[:name].gsub(/[A-Z]/) do |letter|
		"_" + letter[0..0].downcase
	end
	return "cmd#{function_name}"
end
%>

<% for option in filter_eligible_options(APACHE2_DIRECTORY_CONFIGURATION_OPTIONS) -%>
	<% if option[:type] == :string %>
		static const char *
		<%= function_for(option) %>(cmd_parms *cmd, void *pcfg, const char *arg) {
			DirConfig *config = (DirConfig *) pcfg;
			config-><%= struct_field_for(option) %> = arg;
			return NULL;
		}
	<% elsif option[:type] == :integer %>
		static const char *
		<%= function_for(option) %>(cmd_parms *cmd, void *pcfg, const char *arg) {
			DirConfig *config = (DirConfig *) pcfg;
			char *end;
			long result;

			result = strtol(arg, &end, 10);
			if (*end != '\0') {
				string message = "Invalid number specified for ";
				message.append(cmd->directive->directive);
				message.append(".");

				char *messageStr = (char *) apr_palloc(cmd->temp_pool,
					message.size() + 1);
				memcpy(messageStr, message.c_str(), message.size() + 1);
				return messageStr;
			<% if option[:min_value] %>
				} else if (result < <%= option[:min_value] %>) {
					string message = "Value for ";
					message.append(cmd->directive->directive);
					message.append(" must be greater than or equal to <%= option[:min_value] %>.");

					char *messageStr = (char *) apr_palloc(cmd->temp_pool,
						message.size() + 1);
					memcpy(messageStr, message.c_str(), message.size() + 1);
					return messageStr;
			<% end %>
			} else {
				config-><%= struct_field_for(option) %> = (int) result;
				return NULL;
			}
		}
	<% elsif option[:type] == :flag %>
		static const char *
		<%= function_for(option) %>(cmd_parms *cmd, void *pcfg, const char *arg) {
			DirConfig *config = (DirConfig *) pcfg;
			config-><%= struct_field_for(option) %> =
				arg ?
				DirConfig::ENABLED :
				DirConfig::DISABLED;
			return NULL;
		}
	<% else
		raise "Unknown option type #{option[:type].inspect} for option #{option[:name]}"
	end %>
<% end %>
