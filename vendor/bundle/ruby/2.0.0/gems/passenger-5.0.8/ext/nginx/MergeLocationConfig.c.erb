/*
 *  Phusion Passenger - https://www.phusionpassenger.com/
 *  Copyright (c) 2010-2014 Phusion
 *
 *  "Phusion Passenger" is a trademark of Hongli Lai & Ninh Bui.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */

/*
 * MergeLocationConfig.c is automatically generated from MergeLocationConfig.c.erb,
 * using definitions from lib/phusion_passenger/nginx/config_options.rb.
 * Edits to MergeLocationConfig.c will be lost.
 *
 * To update MergeLocationConfig.c:
 *   rake nginx
 *
 * To force regeneration of MergeLocationConfig.c:
 *   rm -f ext/nginx/MergeLocationConfig.c
 *   rake ext/nginx/MergeLocationConfig.c
 */

<%
require 'phusion_passenger/nginx/config_options'

def filter_eligible_options(options)
	return options.reject do |option|
		option[:alias_for] ||
			option.fetch(:field, true).nil? ||
			option[:field].to_s =~ /\./ ||
			!option.fetch(:auto_generate_nginx_merge_code, true)
	end
end

def struct_field_for(option)
	if option.has_key?(:field)
		return option[:field]
	else
		return option[:name].sub(/^passenger_/, '')
	end
end

def default_value_for(option)
	case option[:type]
	when :string
		if option[:default]
			return option[:default].inspect
		else
			return "NULL"
		end
	when :integer, :flag
		if option[:default]
			return option[:default]
		else
			return "NGX_CONF_UNSET"
		end
	when :uinteger
		if option[:default]
			return option[:default]
		else
			return "NGX_CONF_UNSET_UINT"
		end
	else
		raise "Unknown type #{option[:type].inspect} for option #{option[:name]}"
	end
end
%>

<% for option in filter_eligible_options(LOCATION_CONFIGURATION_OPTIONS) %>
	<% if option[:type] == :string %>
		ngx_conf_merge_str_value(conf-><%= struct_field_for(option) %>,
			prev-><%= struct_field_for(option) %>,
			NULL);
	<% elsif option[:type] == :integer || option[:type] == :flag %>
		ngx_conf_merge_value(conf-><%= struct_field_for(option) %>,
			prev-><%= struct_field_for(option) %>,
			NGX_CONF_UNSET);
	<% elsif option[:type] == :uinteger %>
		ngx_conf_merge_uint_value(conf-><%= struct_field_for(option) %>,
			prev-><%= struct_field_for(option) %>,
			<%= default_value_for(option) || "NGX_CONF_UNSET_UINT" %>);
	<% elsif option[:type] == :string_array %>
		if (merge_string_array(cf, &prev-><%= struct_field_for(option) %>, &conf-><%= struct_field_for(option) %>) != NGX_OK) {
			ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
				"cannot merge \"<%= option[:name] %>\" configurations");
			return NGX_CONF_ERROR;
		}
	<% elsif option[:type] == :string_keyval %>
		if (merge_string_keyval_table(cf, &prev-><%= struct_field_for(option) %>, &conf-><%= struct_field_for(option) %>) != NGX_OK) {
			ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
				"cannot merge \"<%= option[:name] %>\" configurations");
			return NGX_CONF_ERROR;
		}
	<% else %>
		<% raise "Unknown option type #{option[:type].inspect} for option #{option[:name]}" %>
	<% end %>
<% end %>
